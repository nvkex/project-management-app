// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Project {
    id                  String      @id @default(cuid())
    title               String
    description         String?     @db.Text
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
    abbreviation        String

    leadUserId          String
    lead                User        @relation(fields: [leadUserId], references: [id])
    tasks               Task[] 
    lastCreatedTaskId   Int         @default(0)
    members             ProjectsAndUsers[]

    @@index([abbreviation])
    @@index([leadUserId])
}

model Task {
    id                  String      @id @default(cuid())
    ticketId            String      @unique
    title               String
    description         String      @db.Text
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt

    startDate           DateTime?
    endDate             DateTime?

    status              String      @default("TODO")
    priority            String      @default("LOW")
    assignee            User?       @relation(name: "taskAssignee", fields: [assigneeId], references: [id])
    assigneeId          String?
    createdBy           User        @relation(name: "taskCreator", fields: [createdById], references: [id])
    createdById         String

    project             Project     @relation(fields: [projectId], references: [id])
    projectId           String

    @@index([projectId])
    @@index([createdById])
    @@index([assigneeId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String?   @unique
    password      String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    assignedTasks Task[]    @relation("taskAssignee")
    createdTasks  Task[]    @relation("taskCreator")
    projectLead   Project[] 
    projects      ProjectsAndUsers[]

    // Preferences
    shade         String    @default("teal")
    jobTitle      String?
    department    String?
    organization  String?
    location      String?

    @@index([id])
    @@index([email])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


// M-N relations
model ProjectsAndUsers {
    userId      String
    user        User        @relation(fields: [userId], references: [id])
    projectId   String
    project     Project     @relation(fields: [projectId], references: [id])
    createdAt   DateTime @default(now())

    @@id([userId, projectId])
    @@index([userId])
}